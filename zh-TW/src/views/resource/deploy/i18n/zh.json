{
  "status": {
    "deploying": "App Deploying",
    "policy_changing": "Policy changes",
    "deployed": "App Deployed",
    "deploy_failed": "Application deployment failed",
    "policy_change_failed": "Policy change failed",
    "policy_change_complete": "Policy change completed",
    "tasking": "Deploying tasks in progress",
    "task_complete": "Deployed task completed",
    "task_failed": "Failed to deploy task execution",
    "complete": "Execution completed",
    "failed": "Execution Failed",
    "pending": "Awaiting execution",
    "running": "In progress"
  },
  "tip": {
    "rolling_update": "Scroll Updates",
    "rolling_update_tip": "Slow to replace the old version with a new version. As new versions appear, old versions will be scaled down to keep the total number of applications. This is the default policy for Deemployment objects.",
    "recreate": "Rebuilding",
    "recreate_tip": "Rebuild the deployment will delete the old version before launching the new version, so this will ensure that the two versions of the app will never run simultaneously, but will be shutdown during deployment.",
    "blue_green": "Blue Green",
    "blue_green_tip": "Blue Green deployment (sometimes referred to as Red Black) also deploys old and new versions of applications, during which only older versions will receive production traffic, allowing developers to test new versions before switching them to new versions.",
    "canary": "Gentist Release (Grayscale)",
    "canary_tip": "Deploy exposing some of the users to a new version of the application while providing the rest of the traffic to the old version. Once the experience of the new version is correct, the old version can be gradually replaced. The access controllers and service grids (such as Nginx and Istio) are more complex than is available for the nice can. (e.g. achieve traffic splitting of very fine particles, or split based on HTTP header)",
    "switch_deploy": "Application deployment switched to <span class=\"warning--text\">{0}</span> mode which automatically triggers traffic switches when it first runs. Please confirm execution.",
    "restart_alert": "This action will cause the service to restart",
    "realtime_status": "Real-Time Status",
    "task_center": "Task Center",
    "status": "Status",
    "image": "Mirror",
    "replicas": "Number of copies",
    "running": "Running",
    "deploy_policy": "Deployment Policy",
    "policy": "Policy",
    "step": "Step",
    "pre_weight": "Preset Weight",
    "real_weight": "Actual Weight",
    "info": "Information",
    "request_type": "Service Access Method",
    "port": "Port",
    "realtime_rate": "Realtime Rate",
    "last_24_hours": "Last 24 hours",
    "total_request": "Total Requests",
    "response_time": "Response Time",
    "error_request_count": "Exception requests",
    "traffic": "Traffic",
    "realtime": "Live",
    "in": "in",
    "out": "Outgoing",
    "step_status": "Task Step Status",
    "error_info": "Error message",
    "traffic_topology": "Traffic in VBL.",
    "step_and_traffic": "Step &Traffic"
  },
  "operate": {
    "switch_deploy": "Switch Deployment Mode",
    "detail": "View Details",
    "rollback": "Rollback",
    "restart": "Restart app",
    "abort": "Abort",
    "continue": "Continue",
    "redo": "Retry"
  },
  "tab": {
    "resource_live": "Resource Live",
    "resource_diff": "Resource Diff",
    "log": "Logs",
    "app_status": "App Status"
  },
  "table": {
    "name": "Name",
    "status": "Status",
    "message": "Message",
    "first_trigger_at": "First Time",
    "last_trigger_at": "Last Time",
    "task": "Tasks",
    "start_at": "Start Time",
    "end_at": "End Time"
  }
}
