{
  "login": "ログオン",
  "logout": "ロスト",
  "403": "Forbidden",
  "404": "Not Found",
  "loading": "Loading",
  "username": "ユーザ ID",
  "passwd": "パスワードの指定",
  "query": "Query",
  "status": {
    "success": "Success",
    "failure": "フェアリー"
  },
  "plugin": {
    "no_permission": "You can contact the platform administrator to enable the plugins",
    "cluster_missing": "The cluster has not yet enabled the {0} plugins!",
    "environment_missing": "The {0} plugin has not been enabled for the cluster where the environment is located!",
    "missing": "Plugin {0} is not enabled"
  },
  "datetimepicker": {
    "start": "Start",
    "end": "End",
    "tip": {
      "start_end": "Time(format: 1、12:30、12:30、1230、1230、12303030)",
      "range": "Please select datetime range"
    },
    "last": {
      "5": "Last 5 minutes",
      "15": "Last 15 minutes",
      "30": "Last 30 minutes",
      "60": "Last 1 hours",
      "180": "Last 3 hours",
      "360": "Last 6 hours",
      "720": "Last 12 hours",
      "1440": "Last 24 hours",
      "2880": "Last 2 days",
      "10080": "Last 1 weeks",
      "last_c": "{0} Last {0} minutes"
    }
  },
  "ruler": {
    "required": "Required",
    "not_match": "Not Match",
    "positive_integer": "Error (example: posive integer)",
    "integer": "例外型 (example: integer)",
    "time_interval": "エラー(example: 30s,1m,1h)",
    "size_gb": "エラー(example: 10G)",
    "port": "エラー(example: 9200)",
    "k8s_label": "Does not conform to the Kubernetes specification",
    "k8s_annotation": "Docs not conform to the Kubernetes annotation specification",
    "k8s_name": "Does not conform to Kubernetes naming conventions",
    "email": "Eメール作成",
    "mobile": "Mobile error",
    "password": "Error (includes uppercase and lowercase numeric special 8to 16 passwords)"
  },
  "role": {
    "system": {
      "normal": "Normal",
      "administrator": "管理者"
    },
    "tenant": {
      "ordinary": "Ordinary",
      "admin": "管理者",
      "sys": "システムの管理者(管理者)"
    },
    "project": {
      "dev": "Developer",
      "test": "Test",
      "ops": "Ops",
      "admin": "管理者",
      "sys": "システムの管理者(管理者)",
      "tenantadmin": "Tenant Admin"
    },
    "environment": {
      "operator": "Operator",
      "reader": "Reader",
      "sys": "システムの管理者(管理者)",
      "tenantadmin": "Tenant Admin",
      "projectadmin": "Project Admin",
      "projectops": "Project のOps"
    },
    "mesh": {
      "sys": "システムの管理者(管理者)",
      "normal": "Normal",
      "administrator": "管理者"
    },
    "model": {
      "admin": "管理者"
    }
  },
  "resource": {
    "resource": "Resource",
    "cpu": "CPU",
    "cpu_c": "{0} CPU",
    "gpu": "GPU",
    "video_memory": "Video Memory",
    "memory": "メモリー",
    "memory_c": "{0} Memory",
    "storage": "Storage",
    "storage_c": "{0} Storage",
    "space": "Space",
    "system": "システム",
    "mesh": "Service Mesh",
    "mesh_c": "Service Mesh {0}",
    "cluster": "クラスター",
    "app": "アプリケーションlication",
    "app_c": "アプリケーション {0}",
    "appmanifest": "アプリケーションManifest",
    "node": "Node上",
    "workload": "Workload",
    "deployment": "Deployment",
    "statefulset": "StatefulSet",
    "daemonset": "DaemonSet",
    "pod": "ポッド（ポッド）",
    "container": "コンテナー",
    "service": "Service",
    "ingress": "イングレス",
    "gateway": "Gateway",
    "gateway_instance": "Gateway Instance",
    "job": "作業中",
    "cronjob": "Cronジョブ",
    "configmap": "コンフィグマップ...",
    "secret": "Secret",
    "certmanager": "Cerverer (Container)",
    "crd": "CRD",
    "cr": "カスタムResurce",
    "persistentvolumeclaim": "Persistentvolumeclaim",
    "volumesnapshot": "Volume Snapshot",
    "storageclass": "Storageclass",
    "account": "Account",
    "namespace": "ネームスペース（ネームスペース）",
    "project": "プロジェクト",
    "project_c": "プロジェクト {0}",
    "environment": "Environment",
    "environment_c": "Environment {0}",
    "tenant": "Tenant",
    "tenant_c": "Tenant {0}",
    "role": "Role",
    "member": "Member",
    "member_c": "Member {0}",
    "type": "Type",
    "file": "ファイル",
    "template": "Template（",
    "create_at": "Create Time",
    "kind": "Kind",
    "plugin": "プラグイン",
    "image_registry": "イメージレジストリ",
    "dns": "DNS",
    "authorization_policy": "Authorization Policy",
    "peer_authentication": "Peer Authentication",
    "service_entry": "Service Entry",
    "sidecar": "サイドカー:",
    "virtual_service": "Virtual Service",
    "destination_rule": "Destination Rule",
    "certificate": "Certificate",
    "issuer": "Issuer",
    "event": "Event",
    "platform": "Platform",
    "receiver": "レシーバー",
    "prometheus_rule": "Prometheus Rule",
    "flow": "Flow",
    "output": "Output",
    "monitor_template": "Monitor Template",
    "service_monitor": "Service Monitor"
  },
  "header": {
    "workspace": "Workspace",
    "model_store": "Model ストア",
    "app_store": "App Store から",
    "administrator": "Administrator",
    "tenant_workspace": "Tenat Workspace",
    "audit": "Audit",
    "event": "Event",
    "usercenter": "User セント",
    "user": {
      "tenant": "Tenant",
      "usercenter": "User セント",
      "manual": "Manual",
      "about": "About"
    }
  },
  "filter": {
    "placehold": "Enter query criteria to filter result"
  },
  "data": {
    "unknown": "Unknown",
    "no_data": "No Data",
    "no_cluster": "No Cluster",
    "no_tenant": "No Tenant",
    "data": "データデータ"
  },
  "operate": {
    "add": "アドオン",
    "add_c": "Add {0}",
    "open_c": "Open {0} 文字",
    "batch": "ブチャージ",
    "delete": "Delete",
    "batch_delete_c": "Batch Delete {0}",
    "confirm": "Confirm",
    "cancel": "Cancel",
    "close": "Close",
    "clear": "Clear",
    "operate": "Operate",
    "edit": "エディット",
    "edit_c": "グリット {0}",
    "create": "Create",
    "create_c": "Create {0}",
    "update": "Update",
    "update_c": "update {0}",
    "enter": "Enter {0}",
    "apply": "Apply {0}",
    "delete_c": "Delete {0}",
    "previous": "Prevous",
    "next": "テキスト名",
    "refresh": "Reフレッシュ",
    "shell": "シェル",
    "enable": "Enable",
    "disable": "ディスク",
    "login": "ログオン",
    "return": "Return",
    "deploy": "Deploy",
    "deploy_c": "Deploy {0}",
    "sync": "Sync",
    "sync_c": "Sync {0}",
    "save": "Save",
    "detail": "Detail",
    "reset": "レポジトリ"
  },
  "form": {
    "definition": "{0} Definition",
    "key_value": "Key-value pair",
    "key": "キー",
    "value": "Value",
    "name": "Name"
  },
  "pagination": {
    "count": "Per Page Count"
  },
  "confirm": {
    "tip": "Please confirm the resource name"
  },
  "sidebar": {
    "cluster": "クラスター",
    "runtime": "ランティム",
    "microservice": "Mesh",
    "observability": "Observability",
    "administration": "Management"
  },
  "routerbar": {
    "cluster": {
      "cluster_dashboard": "クラスター",
      "project_dashboaed": "プロジェクト",
      "environment_dashboaed": "Environment",
      "plugins": "プラグイン管理",
      "node": "Node上",
      "workload": "Workload",
      "pod": "ポッド（ポッド）",
      "service": "Service",
      "ingress": "イングレス",
      "gateway": "Gateway",
      "job": "作業中",
      "cronjob": "Cronジョブ",
      "configmap": "コンフィグマップ...",
      "secret": "Secret",
      "certmanager": "Cerverer (Container)",
      "crd": "CRD",
      "persistentvolumeclaim": "Persistentvolumeclaim",
      "volumesnapshot": "Volume Snapshot",
      "storageclass": "Storageclass",
      "app": "アプリ",
      "app_deploy": "App Deploy",
      "app_manifest": "App Manifest",
      "app_config": "App Configuration",
      "registry": "イメージレジストリ",
      "project": "プロジェクト",
      "terminal": "Terminal",
      "log": "Container Log",
      "g_cluster": "クレーター",
      "g_node": "Node上",
      "g_container": "コンテナー",
      "g_dashboard": "Dashboard",
      "g_space": "Space",
      "g_app": "アプリ",
      "g_task": "Task",
      "g_config": "Config",
      "g_crd": "CRD",
      "g_runtime": "ランティム",
      "g_storage": "Storage",
      "h_cluster": "クラスター",
      "h_node": "Node上",
      "h_container": "コンテナー",
      "h_dashboard": "Dashboard",
      "h_space": "Space",
      "h_app": "App Center",
      "h_appmanifest": "Platform App"
    },
    "microservice": {
      "virtualspace": "Virtual Space",
      "dns": "DNS",
      "dashboard": "Virtualspace",
      "workload": "Workload",
      "service": "Service",
      "mesh": "Mesh DAG",
      "configmap": "コンフィグマップ...",
      "gateway_intance": "Gateway Instance",
      "authorization_policy": "Authorization Policy",
      "gateway": "Gateway",
      "peer_authentication": "Peer Authentication",
      "service_entry": "Service Entry",
      "sidecar": "サイドカー:",
      "g_space": "Space",
      "g_virtualspace": "Virtual Space",
      "g_app": "アプリ",
      "g_config": "Config",
      "g_spaceconfig": "Space Config",
      "g_istioconfig": "Istio Config",
      "h_space": "Virtual Space",
      "h_mesh": "Mesh"
    },
    "observability": {
      "dashboard": "Dashboard",
      "integrated": "Integrated",
      "monitor_dahboard": "Monitor",
      "metrics_inquirer": "Metric",
      "log_inquirer": "ログ",
      "trace_inquirer": "トレス",
      "alert_dashboard": "Dashboard",
      "alert_history": "History",
      "alert_blacklist": "ブラックlist",
      "mertic_setting": "メトリックス",
      "log_setting": "ログ",
      "servicemonitor": "Service Monitor",
      "prometheusrule": "Prometheus Rule",
      "alertrule": "Alert Rule",
      "output": "Flow",
      "flow": "Output",
      "monitor_app": "App Monitor",
      "g_dashboard": "Dashboard",
      "g_integrated": "Integrated",
      "g_observability": "Observability",
      "g_inquirer": "Explorer",
      "g_alert": "Alt",
      "g_setting": "Setting",
      "h_dashboard": "Dashboard",
      "h_integrated": "Integrated",
      "h_observability": "Observability",
      "h_alert": "Alt",
      "h_setting": "Setting"
    },
    "administration": {
      "tenant": "Tenant",
      "user": "Account",
      "role": "Role",
      "project": "プロジェクト",
      "environment": "Environment",
      "audit": "Audit",
      "event": "Event",
      "authorization": "Authorization",
      "app_store": "App Store から",
      "model_store": "Model ストア",
      "prometheus_template": "Prometheus Template",
      "monitor_template": "Monitor Template",
      "broadcast": "ステータスの型",
      "g_template": "Template（",
      "g_integrated": "Integrated",
      "g_security": "Security",
      "g_space": "Space",
      "g_tenant": "Tenant",
      "g_notice": "Notesバージョン",
      "h_tenant": "Tenant",
      "h_space": "Space",
      "h_security": "Security",
      "h_integrated": "Integrated"
    }
  },
  "breadcrumb": {
    "virtualspace": "irtual space is an aggregation of a set of environments。",
    "mesh_dag": "Service mesh graph (DAG) is a graph of all load service mesh links under or more namespaces.",
    "dns": "DNS",
    "v_dashboard": "irtual space is an aggregation of a set of environments。",
    "v_workload": "Workload is usually a carrier for accessing services and is an abstraction of a set of a container groups (Pods)。",
    "v_service": "Service is a logical collection that defines a group of containers and a policy for accessing them。",
    "v_configmap": "ConfigMap is often used to store configuration information required by a workload, を構成する and many applications read configuration information from configuration files, command-line arguments, or environment variables.",
    "v_gateway_instance": "Istio gateway instance",
    "v_authorization_policy": "AuthenticationPolicies support access control to workloads in the grid.",
    "v_gateway": "Gateway describes a load balancer running at the edge of the mesh to receive incoming or outgoing HTTP/TCP connections.",
    "v_peer_authentication": "PeerAuthentication defines how traffic will be tunned (or not) to the sidecar.",
    "v_service_entry": "ServiceEntry allows adding additional entries to Istio's internal service registry so that aut-discovered services in the mesh can access/route to these manually specied services。",
    "v_sidecar": "Sidecar describes the configuration of an agent that mediates inbound and outbound communication to the workload instance to which it is attached.",
    "appstore": "HelmChart is a collection of files describing Kubernetes -related resources。 アプリlication can be used to deploy some complex HTTP servers and Webfull-stack applications, databases, cached",
    "appstore_registry": "The chart reposity is where chart packages are stored, used by appstores and deployments.",
    "modelstore": "",
    "modelstore_registry": "AI Model Registry achieves model sykronization by configuring the model warehouse, and is integrated in Kubegems.",
    "auth_setting": "Based on the third-party authentication integrationof oauth2.0/ldap, users can log in various ways。",
    "prometheus_setting": "Configure Prometheus Recording rules to improve monitoring query efficiency。",
    "monitor_template": "Configure monitoring dashboard templates to quickly create monitoring dashboards.",
    "broadcast": "Use banners and notifications to notifications to notify users about schedmaintenance and more.",
    "role": "基本scription of all roles and opermissions of the system。",
    "tenant": "Tenat is a logical unit that organizes your projects and DevOps projects, manages access access to resources, shares resources within a team, etc. It can be used as an independent workspace for team works.",
    "user": "All users of the platform, including system administrators and ordinary members.",
    "audit": "Audit queries for multidimensional oations such as project space, environment space, and resources。",
    "event": "Event is provided by the container cloud event driver, which represents the state history of resources in the cluster。",
    "user_center": "User Center provides user messages, auditing, personal settings.",
    "dashboard": "The container service under the tenant provides a work platform with security isolation and access control。 Here you can overview of the resources running in the current tenant.",
    "project": "Project is an abstract combination of a set of environments, applications, and image repositories。",
    "appmanifest": "またAppManifest is a colletion of description files for a set of workloads, configurations, keys and other rether resources。",
    "registry": "Registry is a reposiitory for storing container images for Kubernetes, DevOps, and container-based application development.",
    "cluster": "serified management of multiple clusters and the basic resources, service components and application resources of each cluster.",
    "plugin": "Service plugin provides management of the health status and enabing status of each service component in the Kubernetes cluster。",
    "environment": "Environment is the boundary of specific application, load, storage and other reces, usually a namespace。",
    "node": "Node provides the running status of nodes under the current cluster。",
    "app": "アプリケーションライセンスファイル runtime from application orchestration and application store deployment.",
    "deploy": "アプリのDeployment provides a variety of application deployment methods, including rebuild, rolling update, blue-green, canary, etc.",
    "workload": "Workload is usually a carrier for accessing services and is an abstraction of a set of a container groups (Pods)。",
    "pod": "Pod is the basic unit of execution of a Kubernetes application、 the smallest and simplest unit of the Kubernetes object model that you create or deploy。",
    "service": "Service is a logical collection that defines a group of containers and a policy for accessing them。",
    "ingress": "Ingress provides a way of aggregating services, internal services of the cluster to the outside of the cluster through an externally accessible IP address。",
    "gateway": "Gateway is used to forward data of other ervers.",
    "job": "Job is responsible for batching short-lived one-off tasks, that are executed only once, tasks that are executed only once, and guarantees that one or container groups of a batched task complete successfully.",
    "cronjob": "Cronジョブ・manages time-based jobs, such as running once at a gven point in time, or periodically at a gven point in time.",
    "configmap": "ConfigMap is often used to store configuration information required by a workload, を構成する and many applications read configuration information from configuration files, command-line arguments, or environment variables.",
    "secret": "Secret is a resource object that contains a small amount of sensive information, such as passwords, tokens, secret keys, etc. pairs and can be used in container groups.",
    "certmanager": "Certificate, when creating a certificate, the certificate manager will responding Certificate, which contains the encoded X. 09 certificate request, issuer reference and other options based on the certificate resource specification.",
    "crd": "CRD is an extension method for Kubernetes to implement custom resource types. Users can manipulate CRD objects in the same waway as built-in resource objects",
    "persistentvolumeclaim": "PersistentVolumeClaiis used by user-created workloads and is a resource object that persists workload データ。",
    "volumesnapshot": "Volumenapshot represents a point-in-time copy of a storage volume。 Snapshots can be used to provision new volume (pre-populated with snapshot) or to restore existing storage volumes to a previous state (represented by snapshots)",
    "storageclass": "Storagess is configured by the cluster administrator to configure the storage server parameters, and provides storage for cluster users according to the type.",
    "appconfig": "アプリケーションConfig provide external dynamic configuration services to applications",
    "observe": "Observability provides all functions such as log collection, viewing, alarm/monitoring indicator collection, alarm/alarm/alarm center, history/link tracking, etc.",
    "integrated": "The Intergate Center allows you to configure application/middleware link tracking, metric monitoring, and logging for observability capabilities.",
    "dash_overview": "Monitor Dashboard alius to query and visualize your metrics.",
    "dash_metrics": "Metrics allows you to query stem monitoring metics and generate related alarms",
    "dash_log": "Log is based on Loki's log viewing panel, which can perform log real-time query, snapshot, filtering, etc.",
    "dash_trace": "Jaeger is an end-to-end distributed tracking system。",
    "alert_overview": "alert Dashboard altrends you to vview recent alert trends, summary and comparison of alert indicators。",
    "alert_history": "Alert History allows you to vview the history of alerts by condition。",
    "alert_blacklist": "Alert Black（allows you to silence some alerts that you do not not to receive。",
    "config-monitor": "Monitor Config Center you to configure collectors, alarms, receivers and other monitoring indicators.",
    "log_monitor": "The Log Config Center aliu to configure log collector, alarms, receivers and other log metrics, as well log flow flow ftering and other configurations .",
    "service_monitor": "ServiceMonitor defines monitoring for a set of services, which is automatically discovered by Prometheus and becomes the target of ites.",
    "prometheus_rule": "PrometheusRule are usually Prometheus alert rules set for monitoring indicators。",
    "flow": "Flow/ClusterFlow defines a log flow with filters and outputs.",
    "output": "Output/ClusterOutput defines the output to which your flow can send log messages.",
    "dash_app": "Jaeger App monitor"
  },
  "metadata": {
    "description": "Let cloudnative management more easily.",
    "environment_type": {
      "dev": "Development",
      "test": "Test",
      "prod": "Production"
    }
  },
  "tip": {
    "version": "Verison {0} has been release, please login again",
    "batch_delete_c": "Please confirm the following resources that need to be {0}d!",
    "batch_select_c": "Please {0} のSelect",
    "batch_confirm_c": "Please {0} の入力中",
    "batch_rule_c": "{0}",
    "batch_delete": "yes",
    "cluster": "Please create or select cluster",
    "project_select": "There is no environment under this project, please re-select the project or add an environment",
    "save_data": "Please the data",
    "parse_error": "Data parsing error",
    "select_tenant": "Please select tenant",
    "select_environment": "Please select environment",
    "select_project_environment": "Please select project and environment",
    "condition": "たくましい区域",
    "not_correct_yaml": "It is not the correct K8S yaml format, please add the necessary fill in the correct data format, the error message is:",
    "path": "Path",
    "missing_metadata": "Missing metadata",
    "missing_name": "Missing name",
    "missing_namespace": "Missing namespace",
    "select_namespace": "Please select namespace first",
    "in_virtualspace": "Added virtual space",
    "not_allocate_resource": "Tenant has no resources assigned",
    "token_expired": "Token expired, please login again",
    "401": "Authentication failed, please login to visit",
    "request_params_error": "Incorreclectest parameters",
    "success": "Successful",
    "timeout": "Request のtimeout",
    "403": "Not authorized to access data",
    "404": "The requested resource does not exist",
    "405": "Request not allowed",
    "409": "Request resource conlict",
    "422": "requestrequest, requestresult:",
    "500": "サーバー failure",
    "502": "Gateway error",
    "503": "Service unavailable",
    "504": "Server response timeout",
    "unknown_error": "Unknown error",
    "start_end": "Start Time And End Time"
  },
  "tab": {
    "overview": "Overvview",
    "resource_info": "Resource Info",
    "metadata": "Metadata",
    "event": "Event",
    "pod": "ポッド（ポッド）",
    "monitor": "Monitor"
  }
}
