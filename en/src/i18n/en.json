{
  "login": "Sign in",
  "logout": "Logout",
  "403": "No permissions for access",
  "404": "Page does not exist",
  "loading": "Data fetched",
  "username": "Username",
  "passwd": "Password",
  "query": "Search",
  "status": {
    "success": "Success",
    "failure": "Failed"
  },
  "plugin": {
    "no_permission": "You can contact the platform administrator to enable this plugin",
    "cluster_missing": "{0} plugins are not yet enabled for this cluster!",
    "environment_missing": "The cluster in this environment is not yet enabled for {0} plugins!",
    "missing": "You haven't enabled {0} plugins yet!"
  },
  "datetimepicker": {
    "start": "Start Time",
    "end": "End Time",
    "tip": {
      "start_end": "End Time (format: 1, 12, 12:30, 12:30, 12:30, 1230, 123030)",
      "range": "Please select date time range"
    },
    "last": {
      "5": "Last 5 minutes",
      "15": "Last 15 minutes",
      "30": "Last 30 minutes",
      "60": "Last 1 hour",
      "180": "Last 3 hours",
      "360": "Last 6 hours",
      "720": "Last 12 hours",
      "1440": "Last 24 Hours",
      "2880": "Last 2 days",
      "10080": "Last week",
      "last_c": "Last{0}minutes"
    }
  },
  "ruler": {
    "required": "Required fields",
    "not_match": "Mismatch",
    "positive_integer": "Wrong format (example:positive integer)",
    "integer": "Wrong format (example:integer)",
    "time_interval": "Wrong format (example:30s,1m,1h)",
    "size_gb": "Wrong format (example:10G)",
    "port": "Wrong format (example:9200)",
    "k8s_label": "does not conform to the Kubernetes tag specification",
    "k8s_annotation": "does not conform to the Kubernetes annotation specification",
    "k8s_name": "does not conform to Kubernetes naming specification",
    "email": "Incorrect email format",
    "mobile": "Error format for phone number",
    "password": "Errors in format (8-16-bit password with case special characters)"
  },
  "role": {
    "system": {
      "normal": "Normal User",
      "administrator": "Admin"
    },
    "tenant": {
      "ordinary": "Ordinary Members",
      "admin": "Admin",
      "sys": "System administrator"
    },
    "project": {
      "dev": "Research",
      "test": "Test",
      "ops": "Vi",
      "admin": "Admin",
      "sys": "System administrator",
      "tenantadmin": "Tenant Admin"
    },
    "environment": {
      "operator": "Operators",
      "reader": "Read-only members",
      "sys": "System administrator",
      "tenantadmin": "Tenant Admin",
      "projectadmin": "Project Admin",
      "projectops": "Project Transport"
    },
    "mesh": {
      "sys": "System administrator",
      "normal": "Normal User",
      "administrator": "Admin"
    },
    "model": {
      "admin": "Admin"
    }
  },
  "resource": {
    "resource": "Resources",
    "cpu": "CPU",
    "cpu_c": "{0}CPU",
    "gpu": "GPU",
    "video_memory": "Discover",
    "memory": "Memory",
    "memory_c": "{0}Memory",
    "storage": "Storage",
    "storage_c": "{0}storage",
    "space": "Space",
    "system": "System",
    "mesh": "Virtual Space",
    "mesh_c": "Virtual space{0}",
    "cluster": "Cluster",
    "app": "Apps",
    "app_c": "Apply{0}",
    "appmanifest": "Apply Organization",
    "node": "Node",
    "workload": "Work load",
    "deployment": "Stateless Services",
    "statefulset": "Status Service",
    "daemonset": "Daemon Service",
    "pod": "Container Group",
    "container": "Container",
    "service": "Services",
    "ingress": "Route",
    "gateway": "Gateway",
    "gateway_instance": "Gateway Instance",
    "job": "Tasks",
    "cronjob": "Scheduled tasks",
    "configmap": "Configuration",
    "secret": "Key",
    "certmanager": "Certificates",
    "crd": "CRD",
    "cr": "Custom Resource",
    "persistentvolumeclaim": "Storage volume",
    "volumesnapshot": "Store volume snapshot",
    "storageclass": "Storage type",
    "account": "User",
    "namespace": "Namespace",
    "project": "Project",
    "project_c": "Project{0}",
    "environment": "Environment",
    "environment_c": "Environment{0}",
    "tenant": "Tenant",
    "tenant_c": "Tenant{0}",
    "role": "Roles",
    "member": "Members",
    "member_c": "Members{0}",
    "type": "Type",
    "file": "Documentation",
    "template": "Templates",
    "create_at": "Created on",
    "kind": "Resources",
    "plugin": "Plugins",
    "image_registry": "Mirror Repository",
    "dns": "DNS",
    "authorization_policy": "Authentication Policy",
    "peer_authentication": "End point authentication",
    "service_entry": "Service Entry",
    "sidecar": "Side Cart",
    "virtual_service": "Virtual Service",
    "destination_rule": "Traffic Rules",
    "certificate": "Certificates",
    "issuer": "Issuing Authority",
    "event": "Event",
    "platform": "Platform",
    "receiver": "Receiver",
    "prometheus_rule": "Warning Rules",
    "flow": "Collector",
    "output": "Router",
    "monitor_template": "Monitor template",
    "service_monitor": "Collector"
  },
  "header": {
    "workspace": "Workbench",
    "model_store": "Algorithm Store",
    "app_store": "App Store",
    "administrator": "Admin",
    "tenant_workspace": "Bender Bench",
    "audit": "Audit",
    "event": "Event",
    "usercenter": "User Center",
    "user": {
      "tenant": "Tenant",
      "usercenter": "User Center",
      "manual": "Product Manual",
      "about": "About"
    }
  },
  "filter": {
    "placehold": "Enter query condition to filter"
  },
  "data": {
    "unknown": "Unknown",
    "no_data": "No data yet",
    "no_cluster": "No cluster yet",
    "no_tenant": "No tenants",
    "data": "Data"
  },
  "operate": {
    "add": "Add",
    "add_c": "Add{0}",
    "open_c": "Enable{0}",
    "batch": "Bulk",
    "delete": "Delete",
    "batch_delete_c": "Bulk delete{0}",
    "confirm": "OK",
    "cancel": "Cancel",
    "close": "Close",
    "clear": "Empty",
    "edit": "Edit",
    "edit_c": "Edit{0}",
    "operate": "Operations",
    "create": "Create New",
    "create_c": "Create{0}",
    "update": "Update",
    "update_c": "Update{0}",
    "enter": "Go to{0}",
    "apply": "Request{0}",
    "delete_c": "Delete{0}",
    "previous": "Previous step",
    "next": "Next step",
    "refresh": "Refresh",
    "shell": "Execute command",
    "enable": "Enabled",
    "disable": "Disabled",
    "login": "Sign in",
    "return": "Go back",
    "deploy": "Deployment",
    "deploy_c": "Deploying{0}",
    "sync": "Synchronize",
    "sync_c": "Sync{0}",
    "save": "Save",
    "detail": "Details",
    "reset": "Reset"
  },
  "form": {
    "definition": "{0}Definition",
    "key_value": "Key pair",
    "key": "Keys",
    "value": "Value",
    "name": "Name"
  },
  "pagination": {
    "count": "Entries per Page"
  },
  "confirm": {
    "tip": "Please confirm resource name"
  },
  "sidebar": {
    "cluster": "Cluster resources",
    "runtime": "Container Service",
    "microservice": "Service governance",
    "observability": "Visibility",
    "administration": "Platform Manager"
  },
  "routerbar": {
    "cluster": {
      "cluster_dashboard": "Overview of resources",
      "project_dashboaed": "Project Resources",
      "environment_dashboaed": "Environmental resources",
      "plugins": "Plugin management",
      "node": "Node",
      "workload": "Work load",
      "pod": "Container Group",
      "service": "Services",
      "ingress": "Route",
      "gateway": "Gateway",
      "job": "Tasks",
      "cronjob": "Scheduled tasks",
      "configmap": "Configuration",
      "secret": "Key",
      "certmanager": "Certificates",
      "crd": "CRD",
      "persistentvolumeclaim": "Storage volume",
      "volumesnapshot": "Store volume snapshot",
      "storageclass": "Storage type",
      "app": "Apps",
      "app_deploy": "App deployment",
      "app_manifest": "Apply Organization",
      "app_config": "App configuration",
      "registry": "Mirror Repository",
      "project": "Project",
      "terminal": "Terminal",
      "log": "Container Log",
      "g_cluster": "Cluster management",
      "g_node": "Node management",
      "g_container": "Container Service",
      "g_dashboard": "Home",
      "g_space": "Space management",
      "g_app": "App Center",
      "g_task": "Tasks",
      "g_config": "Configuration Center",
      "g_crd": "Custom Resource",
      "g_runtime": "On Run",
      "g_storage": "Storage Center",
      "h_cluster": "Cluster",
      "h_node": "Node",
      "h_container": "Container Service",
      "h_dashboard": "Home",
      "h_space": "Space",
      "h_app": "App Center",
      "h_appmanifest": "Platform app"
    },
    "microservice": {
      "virtualspace": "Virtual Space",
      "dns": "DNS Administration",
      "dashboard": "Virtual Space Resources",
      "workload": "Work load",
      "service": "Services",
      "mesh": "Service Call Graph",
      "configmap": "Kubernetes Configuration",
      "gateway_intance": "Microservice Gateway Instances",
      "authorization_policy": "Authentication Policy",
      "gateway": "Gateway",
      "peer_authentication": "End point authentication",
      "service_entry": "Service Entry",
      "sidecar": "Side Cart",
      "g_space": "Microservice space",
      "g_virtualspace": "Virtual Space",
      "g_app": "Apps",
      "g_config": "Configuration",
      "g_spaceconfig": "Space configuration",
      "g_istioconfig": "Istio Configuration",
      "h_space": "Microservice space",
      "h_mesh": "Microservice governance"
    },
    "observability": {
      "dashboard": "Overview",
      "integrated": "Access Center",
      "monitor_dahboard": "Monitor Palette",
      "metrics_inquirer": "Indicator Query",
      "log_inquirer": "Log Query",
      "trace_inquirer": "Link Queryer",
      "alert_dashboard": "Overview",
      "alert_history": "Warning History",
      "alert_blacklist": "WARNINGS Blacklist",
      "mertic_setting": "Monitor configuration",
      "log_setting": "Log Configuration",
      "servicemonitor": "Monitor collector",
      "prometheusrule": "Warning Rules",
      "alertrule": "Warning Rules",
      "output": "Log Router",
      "flow": "Log Collector",
      "monitor_app": "App monitoring",
      "g_dashboard": "Overview",
      "g_integrated": "Access Center",
      "g_observability": "Visualizations",
      "g_inquirer": "Queryer",
      "g_alert": "Warning Center",
      "g_setting": "Configuration Center",
      "h_dashboard": "Overview",
      "h_integrated": "Access",
      "h_observability": "Visualizations",
      "h_alert": "Warning",
      "h_setting": "Configuration"
    },
    "administration": {
      "tenant": "Tenant",
      "user": "User",
      "role": "Roles",
      "project": "Project",
      "environment": "Environment",
      "audit": "Audit",
      "event": "Event",
      "authorization": "Authenticate",
      "app_store": "App Store",
      "model_store": "Algorithm Store",
      "prometheus_template": "Prometheus template",
      "monitor_template": "Monitor template",
      "broadcast": "Broadcast notifications",
      "g_template": "Templates",
      "g_integrated": "Integration",
      "g_security": "Security",
      "g_space": "Space management",
      "g_tenant": "Tenant management",
      "g_notice": "Announcements",
      "h_tenant": "Tenant",
      "h_space": "Space",
      "h_security": "Security Configuration",
      "h_integrated": "Integration"
    }
  },
  "breadcrumb": {
    "virtualspace": "Virtualspace is a set of environments.",
    "mesh_dag": "The Service Call Map (DAG) is a map of all load service calls links under one or more namespace.",
    "dns": "DNS (DNSDomain).",
    "v_dashboard": "The Tenant Container Service provides a secure, segregated work platform with access control. Here you can see an overview of the running of resources within the current tenant.",
    "v_workload": "Work load (Workload) is usually a carrier that visits the service and is abstract about a group of containers (Pod).",
    "v_service": "Service (Service) is the logical assembly of a class of containers and a strategy to access them.",
    "v_configmap": "Config Set (ConfigMap) is often used to store the configuration information required for the work load. Many applications read configuration information from configuration files, command line parameters, or environment variables.",
    "v_gateway_instance": "IngressGateway.",
    "v_authorization_policy": "Authentication Policy (AuthorizationPolicy) supports access control over work load in the grid.",
    "v_gateway": "Gateway (Gateway) describes the load balancer that runs on the edge of the grid to receive incoming or outgoing HTTP/TCP connections.",
    "v_peer_authentication": "Endpoint authentication (PeerAuthentication) defines how traffic will be transmitted via tunnels (or without) to sidecar.",
    "v_service_entry": "Service Entry (ServiceEntry) allows the addition of additional entries to Istio's internal service registry so that services found automatically in the grid can be access/routed to these manually specified services.",
    "v_sidecar": "Sidear describes the configuration of the proxy, which mediates incoming and outgoing communications to the work load that it takes.",
    "appstore": "HelmChart is a collection of files describing Kubernetes related resources that can be used by individual apps to deploy some complex HTTP servers as well as web-full stack apps, databases, caches, etc.",
    "appstore_registry": "The chart repository is the location of the chart pack and is used by the app store and deployment.",
    "modelstore": "",
    "modelstore_registry": "The AI Model Registry, which is configured to synchronize the model through the repository of the model, is integrated into Kubegems.",
    "auth_setting": "A third party authentication integration based on oauth2.0/ldap allows users to login in a number of ways.",
    "prometheus_setting": "Configure Prometheus Recording rules to increase the effectiveness of monitoring queries.",
    "monitor_template": "Configure monitoring large disk template to quickly create monitor large disks.",
    "broadcast": "Use banners and notifications to notify users of scheduled maintenance information.",
    "role": "A description of all the system's roles (Role) and permissions to operate.",
    "tenant": "Tenant is a logical unit for organizing your project and the DevOps project, managing access to resources and sharing resources within the team, which can serve as independent working space for the team.",
    "user": "All users of the platform (user), including system administrators and regular members.",
    "audit": "The audit (Audit) addressed multi-dimensional operational audit queries for project space, environmental space, resources, etc.",
    "event": "Event Notifications (Event) are provided to the Container Cloud Event Drive, representing the status history of the resource within the cluster.",
    "user_center": "User Center provides user messages, audits, personal settings, etc.",
    "dashboard": "The Tenant Container Service provides a secure, segregated work platform with access control. Here you can see an overview of the running of resources within the current tenant.",
    "project": "Project is a set of environments, applications, and abstract combinations of mirror repositories.",
    "appmanifest": "AppManifest is a collection of descriptive files for a set of working loads, configurations, keys, etc.",
    "registry": "Mirror repository (Registry) is a repository (or collection of repositories) that stores images of Kubernetes, DevOs and packages-based applications.",
    "cluster": "Integrated management of multi-cluster and basic resources, service components and applied resources for each cluster.",
    "plugin": "Service component provides health status of service components within the Kubernetes cluster, enabling state, etc.",
    "environment": "The environment (Environment) is the boundary for specific applications, loads, storage, etc. and is usually a namespace (namespace).",
    "node": "Node provides the current status of the next node in the cluster.",
    "app": "Application is run from app sorting and app store deployments.",
    "deploy": "Application deployment provides a wide range of applications deployment modalities, including rebuilding, rolling updates, blue green, gold, etc.",
    "workload": "Work load (Workload) is usually a carrier that visits the service and is abstract about a group of containers (Pod).",
    "pod": "Container group (Pod) is the basic execution unit of the Kubernetes application. It is the smallest and easiest unit in the Kubernetes object model you created or deployed.",
    "service": "Service (Service) is the logical assembly of a class of containers and a strategy to access them.",
    "ingress": "Route (ingress) provides a aggregated service that allows you to expose the internal services of a cluster to the outside cluster via an externally accessible IP address.",
    "gateway": "Gateway (Gateway ) is used to forward communication data from other servers.",
    "job": "Mission (Job) is responsible for the bulk processing of a short one-time task, i.e. only once, and ensures the successful completion of one or more containers for the batch task.",
    "cronjob": "Time Tasks (CronJob) manage time-based tasks such as running only once at a given point of time, or running periodically at a given point of time.",
    "configmap": "Config Set (ConfigMap) is often used to store the configuration information required for the work load. Many applications read configuration information from configuration files, command line parameters, or environment variables.",
    "secret": "Key (Secretariat) is a resource object containing a small amount of sensitive information, such as passwords, token, keys, etc. that is saved in key/value form and can be used in a container group.",
    "certmanager": "Certificate, when creating a certificate, the certificate manager will create the corresponding certificateRequest resource, which will include encoded X.509 certificate requests, issuer references, and other options based on certificate resource specification.",
    "crd": "A custom resource (CRD) is an extension of a Kubernetes type that allows users to perform CRD objects as well as in-built resource objects.",
    "persistentvolumeclaim": "Storage volume (PersistVolumeClaim) for work load created by the user is a resource object that perpetuates work load data.",
    "volumesnapshot": "Store volume snapshot (Volumesnapshot) means a copy of the time of the volume. Snapshot can be used to configure new volumes (pre-fill snapshot data) or to restore existing ones to their previous status (expressed by snapshot).",
    "storageclass": "Storage type (StorageClass) is used by cluster administrator to configure the server parameter and is provided by type for cluster users.",
    "appconfig": "App configuration (Nacos) provides external dynamic configuration services to apps",
    "observe": "Observability provides all functions such as log gathering, viewing, warning/monitoring indicator collection, warning/warning centre, history/link tracking.",
    "integrated": "Intergate Center allows you to configure apps/intermediate link tracking, indicator monitoring, log for observability features.",
    "dash_overview": "Monitor Dashboard allows you to query and visualize your indicators.",
    "dash_metrics": "Indicator query (Metrics) allows you to query the system to monitor the indicator and generate related warnings.",
    "dash_log": "Log (Log) is based on Loki log view panels, can be accessed in real time, snapshot, filtering, etc.",
    "dash_trace": "The link query Jaeger is the end-to-end distribution tracking system.",
    "alert_overview": "Alert Dashboard allows you to view recent warning trends, warning aggregates and contrast values.",
    "alert_history": "Alert History allows you to view the warning history information according to conditions.",
    "alert_blacklist": "Alert Blacklist allows you to silence some of the warnings you don't need to receive.",
    "config-monitor": "Monitor Gathering Center (Monitor Config Center) allows you to monitor the configuration of indicators for collectors, warnings, receivers, etc.",
    "log_monitor": "Log Gathering Configuration Center (Logg Config Center) allows you to configure for log collectors, warnings, receivers and other log indices, and to filter the log stream.",
    "service_monitor": "The collector (ServiceMonitor) defines a set of services to be monitored and found automatically by Prometheus as its indicator pulls target target.",
    "prometheus_rule": "The PrometheusRule is usually a Prometheus warning rule for monitoring indicators.",
    "flow": "The log collector (Flow/ClusterFlow) defines a log stream with filters and outputs.",
    "output": "Log router (Output/ClusterOutput) defines the output from which your stream can send log messages.",
    "dash_app": "App Monitor (Jaeger )"
  },
  "metadata": {
    "description": "Easier Cloud Native Management Platform",
    "environment_type": {
      "dev": "Development",
      "test": "Test",
      "prod": "Production"
    }
  },
  "tip": {
    "version": "Version {0} published, please login again",
    "batch_delete_c": "Please confirm that the following resources require{0}!",
    "batch_select_c": "Please select{0}",
    "batch_confirm_c": "Please enter \"Confirm{0}\"",
    "batch_rule_c": "Confirm{0}",
    "batch_delete": "Delete",
    "select_cluster": "Please create or select cluster",
    "project_select": "There is no environment under this item, please re-select an item or add an environment",
    "save_data": "Please save data",
    "parse_error": "Data parse error",
    "select_tenant": "Please select tenant",
    "select_environment": "Please select an environment",
    "select_project_environment": "Please select project environment",
    "condition": "Status",
    "not_correct_yaml": "Not the correct K8S yaml format. Please add the required fields or fill in the correct data format. Error prompting:",
    "path": "Path",
    "missing_metadata": "Missing metadata",
    "missing_name": "Missing name",
    "missing_namespace": "Missing namespace",
    "select_namespace": "Please select namespace first",
    "in_virtualspace": "Added to virtual space",
    "not_allocate_resource": "Tenants not allocated",
    "token_expired": "token expired, please login again",
    "401": "Authentication failed, please login and visit",
    "request_params_error": "Wrong requested parameter",
    "success": "Operation successful",
    "timeout": "Request Timeout",
    "403": "No permission to fetch this data",
    "404": "Requested resource does not exist",
    "405": "Requests are not allowed",
    "409": "Resource Conflict Request",
    "422": "Could not process request entity, request result: ",
    "500": "Server fault",
    "502": "Gateway Error",
    "503": "Service not available",
    "504": "Server response timeout",
    "unknown_error": "Unknown error",
    "start_end": "Time from"
  },
  "tab": {
    "overview": "Overview",
    "resource_info": "Resource Information",
    "metadata": "Metadata",
    "event": "Event",
    "pod": "Container Group",
    "monitor": "Monitor"
  }
}
