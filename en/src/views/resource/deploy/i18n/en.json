{
  "status": {
    "deploying": "App Deploying",
    "policy_changing": "Policy changes",
    "deployed": "App Deployed",
    "deploy_failed": "Application failure",
    "policy_change_failed": "Policy change failed",
    "policy_change_complete": "Policy change completed",
    "tasking": "Deploying tasks in progress",
    "task_complete": "Employed task completed",
    "task_failed": "Failed to upload task",
    "complete": "Execution completed",
    "failed": "Execution failed",
    "pending": "Awaiting execution",
    "running": "In progress"
  },
  "tip": {
    "rolling_update": "Scroll Updates",
    "rolling_update_tip": "Slow to replace the old version with a new version. As new versions appear, old versions will be scattered to keep the total number of applications. This is the default policy for employment objectives.",
    "recreate": "Building",
    "recreate_tip": "Rebuild the employment will delete the old version before launching the new version, so this will ensure that the two versions of the app will never run moderate, but will be shutdown during employment.",
    "blue_green": "Blue Green",
    "blue_green_tip": "Blue Green employment (sometimes referred to as Red Black) also causes employment old and new versions of applications, During which only older versions will receive production trafficking, allow developers to test new versions before turning them to new versions.",
    "canary": "Gentist Release (Grayscale)",
    "canary_tip": "Depleting some of the users to a new version of the application while providing the rest of the traffic to the gold version. Once the experience of the new version is correct, the old version can be gradually replaced. The access controls and service grids (such as Nginx and Istio) are more complete than is available for the nice can. (e.g. achievement traffic splitting of very fine fine particules, or flit based on HTTP header)",
    "switch_deploy": "Application witness to <span class=\"warning--text\">{0}</span> mode which automally triggers traffic switches when it first runs. Please confirm execution.",
    "restart_alert": "This action will cause the service to restart",
    "realtime_status": "Real-Time Status",
    "task_center": "Task Center",
    "status": "Status",
    "image": "Mirror",
    "replicas": "Number of copies",
    "running": "Running",
    "deploy_policy": "Employment Policy",
    "policy": "Policy",
    "step": "Step",
    "pre_weight": "Preset Weight",
    "real_weight": "Active Weight",
    "info": "Information",
    "request_type": "Service Access Method",
    "port": "Port",
    "realtime_rate": "Realtime Rate",
    "last_24_hours": "Last 24 hours",
    "total_request": "Total Requests",
    "response_time": "Response Time",
    "error_request_count": "Exception requests",
    "traffic": "Traffic",
    "realtime": "Live",
    "in": "in",
    "out": "Outgoing",
    "step_status": "Task Step Status",
    "error_info": "Error message",
    "traffic_topology": "Traffic in VBL.",
    "step_and_traffic": "Step &Traffic"
  },
  "operate": {
    "switch_deploy": "Switch Employment Mode",
    "detail": "View Details",
    "rollback": "Rollback",
    "restart": "Start app",
    "abort": "Abort",
    "continue": "Continue",
    "redo": "Retry"
  },
  "tab": {
    "resource_live": "Resource Live",
    "resource_diff": "Resource Diff",
    "log": "Logs",
    "app_status": "App Status"
  },
  "table": {
    "name": "Name",
    "status": "Status",
    "message": "Message",
    "first_trigger_at": "First Time",
    "last_trigger_at": "Last Time",
    "task": "Tasks",
    "start_at": "Start Time",
    "end_at": "End Time"
  }
}
